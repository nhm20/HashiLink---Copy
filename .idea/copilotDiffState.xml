<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/hashilink/ui/buyer/BuyerHomeFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/hashilink/ui/buyer/BuyerHomeFragment.kt" />
              <option name="originalContent" value="package com.example.hashilink.ui.buyer&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.hashilink.R&#10;import com.example.hashilink.ui.seller.ProductAdapter&#10;import com.example.hashilink.viewmodel.ProductViewModel&#10;&#10;class BuyerHomeFragment : Fragment() {&#10;&#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {&#10;        return inflater.inflate(R.layout.fragment_buyer_home, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setupBottomNavigation(view)&#10;        setupProducts(view)&#10;    }&#10;&#10;    private fun setupBottomNavigation(view: View) {&#10;        val bottomNav = view.findViewById&lt;com.google.android.material.bottomnavigation.BottomNavigationView&gt;(R.id.buyer_bottom_navigation)&#10;        bottomNav.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_home -&gt; {&#10;                    // TODO: Load Home fragment&#10;                    true&#10;                }&#10;                R.id.nav_orders -&gt; {&#10;                    // TODO: Load Orders fragment&#10;                    true&#10;                }&#10;                R.id.nav_profile -&gt; {&#10;                    // TODO: Load Profile fragment&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupProducts(view: View) {&#10;        // Setup products RecyclerView&#10;        val recyclerView = view.findViewById&lt;RecyclerView&gt;(R.id.rvProducts)&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        val adapter = ProductAdapter()&#10;        recyclerView.adapter = adapter&#10;&#10;        val productViewModel = ViewModelProvider(this)[ProductViewModel::class.java]&#10;        productViewModel.products.observe(viewLifecycleOwner) { products -&gt;&#10;            adapter.submitList(products)&#10;        }&#10;        productViewModel.loading.observe(viewLifecycleOwner) { isLoading -&gt;&#10;            // Optionally show/hide loading indicator&#10;        }&#10;        productViewModel.error.observe(viewLifecycleOwner) { errorMsg -&gt;&#10;            // Optionally show error message&#10;        }&#10;        // Load all products for buyers&#10;        productViewModel.loadAllProducts()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.hashilink.ui.buyer&#10;&#10;import android.os.Bundle&#10;import android.text.Editable&#10;import android.text.TextWatcher&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.EditText&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.hashilink.R&#10;import com.example.hashilink.data.model.Product&#10;import com.example.hashilink.ui.seller.ProductAdapter&#10;import com.example.hashilink.viewmodel.ProductViewModel&#10;&#10;class BuyerHomeFragment : Fragment() {&#10;&#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {&#10;        return inflater.inflate(R.layout.fragment_buyer_home, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        setupBottomNavigation(view)&#10;        setupProducts(view)&#10;    }&#10;&#10;    private fun setupBottomNavigation(view: View) {&#10;        val bottomNav = view.findViewById&lt;com.google.android.material.bottomnavigation.BottomNavigationView&gt;(R.id.buyer_bottom_navigation)&#10;        bottomNav.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.nav_home -&gt; {&#10;                    // TODO: Load Home fragment&#10;                    true&#10;                }&#10;                R.id.nav_orders -&gt; {&#10;                    // TODO: Load Orders fragment&#10;                    true&#10;                }&#10;                R.id.nav_profile -&gt; {&#10;                    // TODO: Load Profile fragment&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupProducts(view: View) {&#10;        // Setup products RecyclerView&#10;        val recyclerView = view.findViewById&lt;RecyclerView&gt;(R.id.rvProducts)&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        val adapter = ProductAdapter()&#10;        recyclerView.adapter = adapter&#10;&#10;        val productViewModel = ViewModelProvider(this)[ProductViewModel::class.java]&#10;        var allProducts: List&lt;Product&gt; = emptyList()&#10;        productViewModel.products.observe(viewLifecycleOwner) { products -&gt;&#10;            allProducts = products&#10;            adapter.submitList(products)&#10;        }&#10;        productViewModel.loading.observe(viewLifecycleOwner) { isLoading -&gt;&#10;            // Optionally show/hide loading indicator&#10;        }&#10;        productViewModel.error.observe(viewLifecycleOwner) { errorMsg -&gt;&#10;            // Optionally show error message&#10;        }&#10;        // Load all products for buyers&#10;        productViewModel.loadAllProducts()&#10;&#10;        // Setup search functionality&#10;        val etSearch = view.findViewById&lt;EditText&gt;(R.id.etSearch)&#10;        etSearch.addTextChangedListener(object : TextWatcher {&#10;            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}&#10;            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}&#10;            override fun afterTextChanged(s: Editable?) {&#10;                val query = s.toString().lowercase()&#10;                val filteredProducts = if (query.isEmpty()) {&#10;                    allProducts&#10;                } else {&#10;                    allProducts.filter { it.name.lowercase().contains(query) }&#10;                }&#10;                adapter.submitList(filteredProducts)&#10;            }&#10;        })&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/b_activity_register.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/b_activity_register.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etName&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Name&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etEmail&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Email&quot;&#10;        android:inputType=&quot;textEmailAddress&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etPassword&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Password&quot;&#10;        android:inputType=&quot;textPassword&quot; /&gt;&#10;&#10;    &lt;RadioGroup&#10;        android:id=&quot;@+id/rgRole&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rbBuyer&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Buyer&quot; /&gt;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rbFarmer&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Farmer&quot; /&gt;&#10;    &lt;/RadioGroup&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnRegister&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Register&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etName&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Name&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etEmail&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Email&quot;&#10;        android:inputType=&quot;textEmailAddress&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etPassword&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Password&quot;&#10;        android:inputType=&quot;textPassword&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etMobile&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Mobile&quot;&#10;        android:inputType=&quot;phone&quot; /&gt;&#10;&#10;    &lt;RadioGroup&#10;        android:id=&quot;@+id/rgRole&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rbBuyer&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Buyer&quot; /&gt;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rbFarmer&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Farmer&quot; /&gt;&#10;    &lt;/RadioGroup&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnRegister&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Register&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>